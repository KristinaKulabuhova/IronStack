# Защищенный стек
## Идея
Хотим обезопасить стек от посторонних записей и записей за границу стека.
___
Есть динамический стек, в конце и в начале которого есть канарейки (фиксированные известные значения).
Тем самым можем предотвратить переполнение и выход за границы стека.
Сам стек хешируется. И после каждым действием над стеком происходит проверка хеша и валидности канареек.

## Реализация
Есть структура в файле stack.h
```C
    typedef struct {
        StackElement* array; #  Стек
        int64_t size; # Размер массива
        StackElement CANARY = rand(); # Рандомное начение канарейки
        int64_t capacity; # Вместимость стека
        uint64_t hash; # Значение хеша
    } IronStack;
```
Для которой есть методы для вставки, удаления и просмотра элементов,
а также так как стек динамический, есть метод Reallocate, позволяющий изменять вместимость стека.
Отдельно пишется фунция hashing, которая как раз хеширует наш стек
и функция Check, проверяющая канарейки.

## Запуск
Чтобы запустить проект используете команду
```
...
```
___
Также проект подразумевает покрытие каждой функции тестами, которые лежат в test.h
Чтобы запустить проект с тестами используйте флаг
```
-DTEST_BUILD
```
